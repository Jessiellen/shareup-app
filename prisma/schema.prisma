// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  bio       String?
  location  String?
  rating    Float    @default(0.0)
  skills    String?  // JSON string of skills array
  interests String?  // JSON string of interests array
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth-related fields
  emailVerified DateTime?
  image         String?

  // Relations
  posts         Post[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  appointments     Appointment[]
  reviews          Review[]
  auditLogs        AuditLog[]

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  image       String?
  tags        String?  // JSON string of tags array
  skillLevel  String   // "Iniciante", "Intermediário", "Avançado"
  duration    String
  isExchange  Boolean  @default(true)
  likes       Int      @default(0)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // "text", "image", "file"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  senderId   String
  receiverId String
  sender     User   @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Appointment {
  id          String            @id @default(cuid())
  title       String
  description String?
  date        DateTime
  duration    Int               // duration in minutes
  status      AppointmentStatus @default(PENDING)
  type        String?           // "online", "presencial"
  location    String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // "CREATE", "UPDATE", "DELETE"
  field     String?  // field that was changed
  oldValue  String?
  newValue  String?
  timestamp DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
